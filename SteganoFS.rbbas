#tag ClassProtected Class SteganoFS	#tag Method, Flags = &h0		Function AddPicture(p As Picture) As Boolean		  Dim w, h, n, i, j, x As Integer		  Dim px As Picture		  Dim mb As MemoryBlock		  Dim c As Color		  		  w=p.Width		  h=p.Height		  n=w*h*3+10		  // 2 bytes for type		  // 4 bytes for size or wxh		  // 4 bytes for pos(0)		  		  if n>MaxSize Then Return False		  MaxSize=MaxSize-n		  		  x=Counter*10		  StorageMB.UInt16Value(x)=2		  StorageMB.UInt16Value(x+2)=w		  StorageMB.UInt16Value(x+4)=h		  StorageMB.UInt32Value(x+6)=NextPos		  NextPos=NextPos+n-10		  Queue.Append 2		  Counter=Counter+1		  		  mb=New MemoryBlock(n-10)		  px=New Picture(w, h, 32)		  px.Graphics.DrawPicture p, 0, 0		  Dim rs As RGBSurface		  rs=px.RGBSurface		  		  n=0		  w=w-1		  h=h-1		  For j=0 to h		    For i=0 to w		      c=rs.Pixel(i,j)		      mb.Byte(n)=c.Red		      n=n+1		      mb.Byte(n)=c.Green		      n=n+1		      mb.Byte(n)=c.Blue		      n=n+1		    Next		  Next		  		  PictureMBs.Append mb		  		  Return True		  		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function AddText(s As String) As Boolean		  Dim n, x As Integer		  		  n=s.LenB()+4		  // +ChrB(0)+ChrB(0)+ChrB(0)+ChrB(0)		  		  n=n+10		  // 2 bytes for type		  // 4 bytes for size or wxh		  // 4 bytes for pos(0)		  		  if n>MaxSize Then Return False		  TextStrings.Append s		  MaxSize=MaxSize-n		  		  x=Counter*10		  StorageMB.UInt16Value(x)=1		  StorageMB.UInt32Value(x+2)=n-10		  StorageMB.UInt32Value(x+6)=NextPos		  NextPos=NextPos+n-10		  Queue.Append 1		  		  		  Counter=Counter+1		  Return True		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub BuildFromPict(pz As Picture)		  if pz=Nil Then Return		  		  Dim w, h, i, j, n, pos, k, mbx As Integer		  Dim c As Color		  		  w=pz.Width		  h=pz.Height		  Width=w		  Height=h		  StoragePic=New Picture(w, h, 32)		  StoragePic.Graphics.DrawPicture pz, 0, 0		  rgs=StoragePic.RGBSurface		  		  StorageMB=New MemoryBlock(w*h*6\8)		  w=w-1		  h=h-1		  pos=6		  		  For j=0 to h		    For i=0 to w		      c=rgs.Pixel(i,j)		      k=k+Bitwise.ShiftLeft(Bitwise.BitAnd(c.Red, &b00000011), pos)		      n=n+1		      pos=pos-2		      if pos<0 Then		        StorageMB.Byte(mbx)=k		        pos=6		        k=0		        mbx=mbx+1		      End If		      		      k=k+Bitwise.ShiftLeft(Bitwise.BitAnd(c.Green, &b00000011), pos)		      n=n+1		      pos=pos-2		      if pos<0 Then		        StorageMB.Byte(mbx)=k		        pos=6		        k=0		        mbx=mbx+1		      End If		      		      k=k+Bitwise.ShiftLeft(Bitwise.BitAnd(c.Blue, &b00000011), pos)		      n=n+1		      pos=pos-2		      if pos<0 Then		        StorageMB.Byte(mbx)=k		        pos=6		        k=0		        mbx=mbx+1		      End If		      		    Next		  Next		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Compile()		  Dim i, j, k, iT, iP, n As Integer		  		  k=Counter*10		  j=Queue.Ubound		  For i=0 to j		    n=StorageMB.UInt16Value(i*10)		    StorageMB.UInt32Value(i*10+6)=StorageMB.UInt32Value(i*10+6)+Counter*10		    Select Case n		      // Type		    Case 1		      // String		      n=TextStrings(iT).LenB+4		      StorageMB.StringValue(k, n)=TextStrings(iT)+ChrB(0)+ChrB(0)+ChrB(0)+ChrB(0)		      k=k+n		      iT=iT+1		    Case 2		      // Picture		      n=PictureMBs(iP).Size		      StorageMB.StringValue(k, n)=PictureMBs(iP).StringValue(0, n)		      k=k+n		      iP=iP+1		    Case Else		      MsgBox Str(n)		    End Select		  Next		  		  n=BitwiseAnd(StorageMB.UInt16Value(0), 255)		  n=n+(256*Counter)		  StorageMB.UInt16Value(0)=n		  		  k=Counter*10		  StorageMB.Size=NextPos+k		  // Compile is final		  // So we truncate the size of the MemoryBlock to what's used		  		  		  isCompiled=True		  		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(f As FolderItem)		  Dim p As Picture		  p=p.Open(f)		  		  if p=Nil Then Return		  		  BuildFromPict(p)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(p As Picture)		  Width=p.Width		  Height=p.Height		  		  StoragePic=New Picture(Width, Height, 32)		  		  StoragePic.Graphics.DrawPicture p, 0, 0		  rgs=StoragePic.RGBSurface		  MaxSize=Width*Height*6\8		  		  StorageMB=New MemoryBlock(MaxSize)		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function List() As String()		  		  Dim t(), s As String		  'if not isCompiled Then Return t		  		  Dim i,j, k, n As Integer		  		  j=StorageMB.Byte(1)-1		  		  For i=0 to j		    If StorageMB.Byte(i*10)=1 Then		      s="Text String"		      n=StorageMB.UInt32Value(i*10+2)		      t.Append "Item "+Str(i)+": "+s+" Len: "+Str(n-4)		    Else		      s="Picture"		      k=StorageMB.UInt16Value(i*10+2)		      n=StorageMB.UInt16Value(i*10+4)		      t.Append "Item "+Str(i)+": "+s+" w: "+Str(k)+", h: "+Str(n)		    End If		  Next		  		  Return t		  		  		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Picture(idx As Integer) As Picture		  Dim nPics, nStrings, w, h, pos, i, j, n, cn As Integer		  		  me.Stats(nPics, nStrings)		  		  If idx>nPics Then Return Nil		  Dim p As Picture		  Dim rs As RGBSurface		  		  j=StorageMB.Byte(1)-1		  pos=-1		  For i=0 to j		    If StorageMB.Byte(i*10)=2 Then		      If cn=idx Then		        w=StorageMB.UInt16Value(i*10+2)		        h=StorageMB.UInt16Value(i*10+4)		        pos=StorageMB.UInt32Value(i*10+6)		        n=w*h*3		        p=New Picture(w, h, 32)		        rs=p.RGBSurface()		        Exit		      End If		      cn=cn+1		    End If		  Next		  		  If pos=-1 Then Return Nil		  		  h=h-1		  w=w-1		  		  For j=0 to h		    For i=0 to w		      rs.Pixel(i, j)=RGB(StorageMB.Byte(pos), StorageMB.Byte(pos+1), StorageMB.Byte(pos+2))		      pos=pos+3		    Next		  Next		  		  Return p		  		  		  		  		  		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Stats(ByRef nPics As Integer, ByRef nStrings As Integer)		  'if not isCompiled Then Return		  		  Dim i, j As Integer		  		  j=StorageMB.Byte(1)-1		  nPics=-1		  nStrings=-1		  		  For i=0 to j		    If StorageMB.Byte(i*10)=1 Then		      // Text String		      nStrings=nStrings+1		    Else		      nPics=nPics+1		    End If		  Next		  		  		  		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Store(f As FolderItem)		  Dim c As Color		  Dim ptr, pos, x As Integer		  Dim i, j, w, h, y0, y1, y2 As Integer		  		  w=Width-1		  h=Height-1		  		  ptr=6		  pos=0		  x=StorageMB.Byte(pos)		  		  For j=0 to h		    For i=0 to w		      c=rgs.Pixel(i, j)		      y0=Bitwise.BitAnd(Bitwise.ShiftRight(x, ptr), &b00000011)		      ptr=ptr-2		      if ptr<0 Then		        ptr=6		        pos=pos+1		        if pos=StorageMB.Size Then Exit		        x=StorageMB.Byte(pos)		      End If		      		      y1=Bitwise.BitAnd(Bitwise.ShiftRight(x, ptr), &b00000011)		      ptr=ptr-2		      if ptr<0 Then		        ptr=6		        pos=pos+1		        if pos=StorageMB.Size Then Exit		        x=StorageMB.Byte(pos)		      End If		      		      y2=Bitwise.BitAnd(Bitwise.ShiftRight(x, ptr), &b00000011)		      ptr=ptr-2		      if ptr<0 Then		        ptr=6		        pos=pos+1		        if pos=StorageMB.Size Then Exit		        x=StorageMB.Byte(pos)		      End If		      		      c=RGB(BitAnd(c.Red, &b11111100)+y0, BitAnd(c.Green, &b11111100)+y1, BitAnd(c.Blue, &b11111100)+y2)		      rgs.Pixel(i, j)=c		    Next		    if pos=StorageMB.Size Then Exit		  Next		  		  StoragePic.Save(f, Picture.SaveAsPNG)		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Text(idx As Integer) As String		  Dim nPics, nStrings, ln, pos, i, j, cn As Integer		  me.Stats(nPics, nStrings)		  		  If idx>nStrings Then Return ""		  Dim s As String		  		  j=StorageMB.Byte(1)-1		  pos=-1		  For i=0 to j		    If StorageMB.Byte(i*10)=1 Then		      If cn=idx Then		        ln=StorageMB.UInt32Value(i*10+2)		        pos=StorageMB.UInt32Value(i*10+6)		        s=StorageMB.CString(pos)		        Exit		      End If		      cn=cn+1		    End If		  Next		  		  If pos=-1 Then Return ""		  		  Return s		End Function	#tag EndMethod	#tag Property, Flags = &h1		Protected Counter As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected Height As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected isCompiled As Boolean = False	#tag EndProperty	#tag Property, Flags = &h1		Protected MaxSize As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected NextPos As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected PictureMBs() As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h1		Protected Queue() As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected rgs As RGBSurface	#tag EndProperty	#tag Property, Flags = &h1		Protected StorageMB As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h1		Protected StoragePic As Picture	#tag EndProperty	#tag Property, Flags = &h1		Protected TextStrings() As String	#tag EndProperty	#tag Property, Flags = &h1		Protected Width As Integer	#tag EndPropertyEnd Class#tag EndClass